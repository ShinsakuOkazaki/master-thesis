\addvspace {10\p@ }
\addvspace {10\p@ }
\contentsline {figure}{\numberline {2$\cdot $1}{\ignorespaces Java Heap Structure\relax }}{15}{figure.caption.6}% 
\contentsline {figure}{\numberline {2$\cdot $2}{\ignorespaces Java Garbage Collection\relax }}{16}{figure.caption.7}% 
\contentsline {figure}{\numberline {2$\cdot $3}{\ignorespaces Representation of Rust Vec$<$i32$>$\relax }}{18}{figure.caption.8}% 
\contentsline {figure}{\numberline {2$\cdot $4}{\ignorespaces Representation of Java ArrayList of String\relax }}{19}{figure.caption.9}% 
\contentsline {figure}{\numberline {2$\cdot $5}{\ignorespaces Representation of Java ArrayList of String after assignment to another variable\relax }}{20}{figure.caption.10}% 
\contentsline {figure}{\numberline {2$\cdot $6}{\ignorespaces Representation of C++ vector of string\relax }}{21}{figure.caption.11}% 
\contentsline {figure}{\numberline {2$\cdot $7}{\ignorespaces Representation of C++ vector of string after assignment to another variable\relax }}{21}{figure.caption.12}% 
\contentsline {figure}{\numberline {2$\cdot $8}{\ignorespaces Representation of Rust Vec$<$String$>$ after assignment to another variable\relax }}{22}{figure.caption.13}% 
\addvspace {10\p@ }
\contentsline {figure}{\numberline {3$\cdot $1}{\ignorespaces Memory Representation of Owner, Reference, and Slice Type\relax }}{26}{figure.caption.14}% 
\contentsline {figure}{\numberline {3$\cdot $2}{\ignorespaces Representation of aggregation strategies in Apache Spark: (a) Traditional Aggregation, (b) Tree Aggregation\relax }}{28}{figure.caption.15}% 
\contentsline {figure}{\numberline {3$\cdot $3}{\ignorespaces Representation of Customer objects Whose fields are different variable type: (a) CustomerOwned struct whose fields are all owned (b) CustomerBorrowed struct whose fields are borrowed with reference (c) CustomerSlice struct whose fields are borrowed with slice for sequence value, otherwise reference\relax }}{31}{figure.caption.16}% 
\contentsline {figure}{\numberline {3$\cdot $4}{\ignorespaces Representation of Order objects Whose fields are different variable type: (a) OrderOwned struct whose fields are all owned (b) OrderBorrowed struct whose fields are borrowed with reference (c) OrderSlice struct whose fields are borrowed with slice for sequence value, otherwise reference\relax }}{32}{figure.caption.17}% 
\addvspace {10\p@ }
\contentsline {figure}{\numberline {4$\cdot $1}{\ignorespaces Runtime of Access to Different Pointer Types with Vec Size Initialization\relax }}{35}{figure.caption.18}% 
\contentsline {figure}{\numberline {4$\cdot $2}{\ignorespaces Runtime of Access to Different Pointer Types without Vec Size Initialization\relax }}{36}{figure.caption.19}% 
\contentsline {figure}{\numberline {4$\cdot $3}{\ignorespaces Runtime for dropping Customer Object\relax }}{37}{figure.caption.20}% 
\contentsline {figure}{\numberline {4$\cdot $4}{\ignorespaces Representation of Source Vector\relax }}{40}{figure.caption.21}% 
\contentsline {figure}{\numberline {4$\cdot $5}{\ignorespaces Runtime of Sorting Elements of Customer Vector\relax }}{40}{figure.caption.22}% 
\contentsline {figure}{\numberline {4$\cdot $6}{\ignorespaces Aggregation function with Arc\relax }}{43}{figure.caption.23}% 
\contentsline {figure}{\numberline {4$\cdot $7}{\ignorespaces Aggregation function with deep-copy\relax }}{43}{figure.caption.24}% 
\contentsline {figure}{\numberline {4$\cdot $8}{\ignorespaces Runtime of Tree-aggregate algorithm\relax }}{44}{figure.caption.25}% 
\contentsline {figure}{\numberline {4$\cdot $9}{\ignorespaces Total runtime whole KNN algorithm (seconds)\relax }}{49}{figure.caption.28}% 
\contentsline {figure}{\numberline {4$\cdot $10}{\ignorespaces Total runtime of preprocessing phase in KNN (seconds)\relax }}{50}{figure.caption.29}% 
\contentsline {figure}{\numberline {4$\cdot $11}{\ignorespaces Total runtime of query phase in KNN (seconds)\relax }}{51}{figure.caption.30}% 
\addvspace {10\p@ }
\addvspace {10\p@ }
\contentsline {figure}{\numberline {A$\cdot $1}{\ignorespaces Integration of Native Methods \relax }}{56}{figure.caption.31}% 
