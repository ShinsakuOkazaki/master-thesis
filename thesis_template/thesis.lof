\addvspace {10\p@ }
\addvspace {10\p@ }
\contentsline {figure}{\numberline {2$\cdot $1}{\ignorespaces Java Heap Structure\relax }}{7}% 
\contentsline {figure}{\numberline {2$\cdot $2}{\ignorespaces Java Garbage Collection\relax }}{8}% 
\contentsline {figure}{\numberline {2$\cdot $3}{\ignorespaces Representation of Rust Vec$<$i32$>$\relax }}{11}% 
\contentsline {figure}{\numberline {2$\cdot $4}{\ignorespaces Representation of Java ArrayList of String\relax }}{12}% 
\contentsline {figure}{\numberline {2$\cdot $5}{\ignorespaces Representation of Java ArrayList of String after assignment to another variable\relax }}{13}% 
\contentsline {figure}{\numberline {2$\cdot $6}{\ignorespaces Representation of C++ vector of string\relax }}{14}% 
\contentsline {figure}{\numberline {2$\cdot $7}{\ignorespaces Representation of C++ vector of string after assignment to another variable\relax }}{14}% 
\contentsline {figure}{\numberline {2$\cdot $8}{\ignorespaces Representation of Rust Vec$<$String$>$ after assignment to another variable\relax }}{15}% 
\addvspace {10\p@ }
\contentsline {figure}{\numberline {3$\cdot $1}{\ignorespaces Memory Representation of Owner, Reference, and Slice Type\relax }}{19}% 
\contentsline {figure}{\numberline {3$\cdot $2}{\ignorespaces Representation of aggregation strategies in Apache Spark: (a) Traditional Aggregation, (b) Tree Aggregation\relax }}{21}% 
\contentsline {figure}{\numberline {3$\cdot $3}{\ignorespaces Representation of Customer objects Whose fields are different variable type: (a) CustomerOwned struct whose fields are all owned (b) CustomerBorrowed struct whose fields are borrowed with reference (c) CustomerSlice struct whose fields are borrowed with slice for sequence value, otherwise reference\relax }}{24}% 
\contentsline {figure}{\numberline {3$\cdot $4}{\ignorespaces Representation of Order objects Whose fields are different variable type: (a) OrderOwned struct whose fields are all owned (b) OrderBorrowed struct whose fields are borrowed with reference (c) OrderSlice struct whose fields are borrowed with slice for sequence value, otherwise reference\relax }}{25}% 
\contentsline {figure}{\numberline {3$\cdot $5}{\ignorespaces Runtime of Access to Different Pointer Types with Vec Size Initialization\relax }}{27}% 
\contentsline {figure}{\numberline {3$\cdot $6}{\ignorespaces Runtime of Access to Different Pointer Types without Vec Size Initialization\relax }}{28}% 
\contentsline {figure}{\numberline {3$\cdot $7}{\ignorespaces Runtime of Access to Fields of Complex Object with Initialization vs without Initialization\relax }}{29}% 
\contentsline {figure}{\numberline {3$\cdot $8}{\ignorespaces Runtime for dropping Customer Object\relax }}{31}% 
\contentsline {figure}{\numberline {3$\cdot $9}{\ignorespaces Representation of Source Vector\relax }}{33}% 
\contentsline {figure}{\numberline {3$\cdot $10}{\ignorespaces Runtime of Sortting Elements of Customer Vector\relax }}{34}% 
\contentsline {figure}{\numberline {3$\cdot $11}{\ignorespaces Runtime of Tree-aggregate algorithm\relax }}{37}% 
\contentsline {figure}{\numberline {3$\cdot $12}{\ignorespaces Aggregation function with Arc\relax }}{38}% 
\contentsline {figure}{\numberline {3$\cdot $13}{\ignorespaces Aggregation function with deep-copy\relax }}{38}% 
\contentsline {figure}{\numberline {3$\cdot $14}{\ignorespaces Runtime of elements copy from one vector and insertion to the other vector.\relax }}{40}% 
\contentsline {figure}{\numberline {3$\cdot $15}{\ignorespaces Runtime of elements copy from one vector and insertion to the other vector.\relax }}{41}% 
\addvspace {10\p@ }
\addvspace {10\p@ }
\contentsline {figure}{\numberline {A$\cdot $1}{\ignorespaces Integration of Native Methods \relax }}{49}% 
